# Copyright (c) 2025, API Next and contributors
# For license information, please see license.txt

import frappe
from frappe import _
from frappe.utils import now_datetime, add_to_date
from typing import Dict, List, Optional, Any
import json

class WorkflowNotificationManager:
    """
    Comprehensive notification management for workflow transitions.
    
    Features:
    - Phase transition notifications
    - Escalation alerts
    - Role-based notifications
    - Email and in-app notifications
    - Template-based messaging
    """
    
    def __init__(self):
        self.notification_templates = self._load_notification_templates()
    
    def send_phase_transition_notification(self, job_order: str, from_phase: str, to_phase: str, user: str):
        """Send notifications for phase transitions."""
        try:
            # Get job order document
            doc = frappe.get_doc("Job Order", job_order)
            
            # Get notification configuration for the transition
            notification_config = self._get_transition_notification_config(from_phase, to_phase)
            
            for notification in notification_config:
                self._send_notification(doc, notification, {
                    "from_phase": from_phase,
                    "to_phase": to_phase,
                    "transition_user": user,
                    "transition_date": now_datetime()
                })
                
        except Exception as e:
            frappe.log_error(f"Phase transition notification error: {str(e)}")
    
    def send_escalation_notification(self, job_order: str, current_phase: str, escalate_to: List[str]):
        """Send escalation notifications."""
        try:
            doc = frappe.get_doc("Job Order", job_order)
            
            escalation_notification = {
                "template": "escalation_alert",
                "recipients": {
                    "roles": escalate_to
                },
                "priority": "high",
                "channels": ["email", "in_app"]
            }
            
            self._send_notification(doc, escalation_notification, {
                "current_phase": current_phase,
                "escalation_date": now_datetime(),
                "days_in_phase": self._calculate_days_in_phase(doc)
            })
            
        except Exception as e:
            frappe.log_error(f"Escalation notification error: {str(e)}")
    
    def send_approval_request_notification(self, job_order: str, approver_role: str, reason: str):
        """Send approval request notifications."""
        try:
            doc = frappe.get_doc("Job Order", job_order)
            
            approval_notification = {
                "template": "approval_request",
                "recipients": {
                    "roles": [approver_role]
                },
                "priority": "medium",
                "channels": ["email", "in_app"],
                "action_required": True
            }
            
            self._send_notification(doc, approval_notification, {
                "reason": reason,
                "request_date": now_datetime(),
                "approver_role": approver_role
            })
            
        except Exception as e:
            frappe.log_error(f"Approval request notification error: {str(e)}")
    
    def send_deadline_reminder(self, job_order: str, days_until_deadline: int):
        """Send deadline reminder notifications."""
        try:
            doc = frappe.get_doc("Job Order", job_order)
            
            reminder_notification = {
                "template": "deadline_reminder",
                "recipients": {
                    "roles": ["Project Manager", "Site Supervisor"],\n                    \"users\": self._get_assigned_users(doc)\n                },\n                \"priority\": \"medium\" if days_until_deadline > 2 else \"high\",\n                \"channels\": [\"email\", \"in_app\"]\n            }\n            \n            self._send_notification(doc, reminder_notification, {\n                \"days_until_deadline\": days_until_deadline,\n                \"deadline_date\": doc.end_date,\n                \"current_phase\": doc.workflow_state\n            })\n            \n        except Exception as e:\n            frappe.log_error(f\"Deadline reminder notification error: {str(e)}\")\n    \n    def _get_transition_notification_config(self, from_phase: str, to_phase: str) -> List[Dict[str, Any]]:\n        \"\"\"Get notification configuration for phase transitions.\"\"\"\n        \n        # Define notification configurations for each transition\n        transition_configs = {\n            (\"Submission\", \"Estimation\"): [\n                {\n                    \"template\": \"estimation_requested\",\n                    \"recipients\": {\"roles\": [\"Estimator\", \"Project Manager\"]},\n                    \"priority\": \"medium\",\n                    \"channels\": [\"email\", \"in_app\"]\n                }\n            ],\n            (\"Estimation\", \"Client Approval\"): [\n                {\n                    \"template\": \"client_approval_needed\",\n                    \"recipients\": {\"roles\": [\"Sales Manager\", \"Client\"]},\n                    \"priority\": \"high\",\n                    \"channels\": [\"email\"]\n                }\n            ],\n            (\"Client Approval\", \"Planning\"): [\n                {\n                    \"template\": \"planning_phase_started\",\n                    \"recipients\": {\"roles\": [\"Project Manager\", \"Resource Coordinator\"]},\n                    \"priority\": \"medium\",\n                    \"channels\": [\"email\", \"in_app\"]\n                }\n            ],\n            (\"Planning\", \"Prework\"): [\n                {\n                    \"template\": \"prework_phase_started\",\n                    \"recipients\": {\"roles\": [\"Site Supervisor\", \"Material Coordinator\"]},\n                    \"priority\": \"medium\",\n                    \"channels\": [\"email\", \"in_app\"]\n                }\n            ],\n            (\"Prework\", \"Execution\"): [\n                {\n                    \"template\": \"execution_phase_started\",\n                    \"recipients\": {\"roles\": [\"Site Supervisor\", \"Technician\"]},\n                    \"priority\": \"high\",\n                    \"channels\": [\"email\", \"in_app\", \"sms\"]\n                }\n            ],\n            (\"Execution\", \"Review\"): [\n                {\n                    \"template\": \"review_phase_started\",\n                    \"recipients\": {\"roles\": [\"Quality Inspector\", \"Project Manager\", \"Client\"]},\n                    \"priority\": \"high\",\n                    \"channels\": [\"email\", \"in_app\"]\n                }\n            ],\n            (\"Review\", \"Invoicing\"): [\n                {\n                    \"template\": \"invoicing_phase_started\",\n                    \"recipients\": {\"roles\": [\"Billing Clerk\", \"Accountant\"]},\n                    \"priority\": \"medium\",\n                    \"channels\": [\"email\", \"in_app\"]\n                }\n            ],\n            (\"Invoicing\", \"Closeout\"): [\n                {\n                    \"template\": \"closeout_phase_started\",\n                    \"recipients\": {\"roles\": [\"Project Manager\", \"Document Controller\"]},\n                    \"priority\": \"medium\",\n                    \"channels\": [\"email\", \"in_app\"]\n                }\n            ],\n            (\"Closeout\", \"Archived\"): [\n                {\n                    \"template\": \"job_completed\",\n                    \"recipients\": {\"roles\": [\"Project Manager\", \"Sales Manager\", \"Client\"]},\n                    \"priority\": \"low\",\n                    \"channels\": [\"email\"]\n                }\n            ]\n        }\n        \n        return transition_configs.get((from_phase, to_phase), [])\n    \n    def _send_notification(self, doc, notification_config: Dict[str, Any], context: Dict[str, Any]):\n        \"\"\"Send notification based on configuration.\"\"\"\n        try:\n            # Get template\n            template_name = notification_config.get(\"template\")\n            template = self.notification_templates.get(template_name)\n            \n            if not template:\n                frappe.log_error(f\"Notification template not found: {template_name}\")\n                return\n            \n            # Build recipient list\n            recipients = self._build_recipient_list(notification_config.get(\"recipients\", {}), doc)\n            \n            if not recipients:\n                frappe.log_error(f\"No recipients found for notification: {template_name}\")\n                return\n            \n            # Render template with context\n            rendered_content = self._render_template(template, doc, context)\n            \n            # Send via configured channels\n            channels = notification_config.get(\"channels\", [\"email\"])\n            priority = notification_config.get(\"priority\", \"medium\")\n            \n            for channel in channels:\n                if channel == \"email\":\n                    self._send_email_notification(recipients, rendered_content, priority)\n                elif channel == \"in_app\":\n                    self._send_in_app_notification(recipients, rendered_content, priority)\n                elif channel == \"sms\":\n                    self._send_sms_notification(recipients, rendered_content, priority)\n                    \n        except Exception as e:\n            frappe.log_error(f\"Notification sending error: {str(e)}\")\n    \n    def _build_recipient_list(self, recipients_config: Dict[str, Any], doc) -> List[str]:\n        \"\"\"Build list of recipient email addresses.\"\"\"\n        recipients = []\n        \n        # Add role-based recipients\n        if \"roles\" in recipients_config:\n            for role in recipients_config[\"roles\"]:\n                role_users = frappe.get_all(\n                    \"Has Role\",\n                    filters={\"role\": role, \"parenttype\": \"User\"},\n                    fields=[\"parent\"]\n                )\n                for user in role_users:\n                    user_email = frappe.db.get_value(\"User\", user.parent, \"email\")\n                    if user_email and user_email not in recipients:\n                        recipients.append(user_email)\n        \n        # Add specific users\n        if \"users\" in recipients_config:\n            for user in recipients_config[\"users\"]:\n                user_email = frappe.db.get_value(\"User\", user, \"email\")\n                if user_email and user_email not in recipients:\n                    recipients.append(user_email)\n        \n        # Add document-specific recipients (e.g., assigned team members)\n        if hasattr(doc, \"team_members\") and doc.team_members:\n            for team_member in doc.team_members:\n                if hasattr(team_member, \"employee\"):\n                    user_id = frappe.db.get_value(\"Employee\", team_member.employee, \"user_id\")\n                    if user_id:\n                        user_email = frappe.db.get_value(\"User\", user_id, \"email\")\n                        if user_email and user_email not in recipients:\n                            recipients.append(user_email)\n        \n        return recipients\n    \n    def _get_assigned_users(self, doc) -> List[str]:\n        \"\"\"Get list of users assigned to the job order.\"\"\"\n        assigned_users = []\n        \n        if hasattr(doc, \"team_members\") and doc.team_members:\n            for team_member in doc.team_members:\n                if hasattr(team_member, \"employee\"):\n                    user_id = frappe.db.get_value(\"Employee\", team_member.employee, \"user_id\")\n                    if user_id:\n                        assigned_users.append(user_id)\n        \n        return assigned_users\n    \n    def _render_template(self, template: Dict[str, Any], doc, context: Dict[str, Any]) -> Dict[str, str]:\n        \"\"\"Render notification template with context data.\"\"\"\n        try:\n            # Combine document data with context\n            full_context = {\n                \"job_number\": doc.job_number,\n                \"customer_name\": doc.customer_name,\n                \"project_name\": doc.project_name,\n                \"job_type\": doc.job_type,\n                \"priority\": doc.priority,\n                \"workflow_state\": doc.workflow_state,\n                \"start_date\": doc.start_date,\n                \"end_date\": doc.end_date,\n                **context\n            }\n            \n            # Simple template rendering (in production, use Jinja2 or similar)\n            subject = template[\"subject\"]\n            body = template[\"body\"]\n            \n            for key, value in full_context.items():\n                placeholder = f\"{{{key}}}\"\n                subject = subject.replace(placeholder, str(value or \"\"))\n                body = body.replace(placeholder, str(value or \"\"))\n            \n            return {\n                \"subject\": subject,\n                \"body\": body\n            }\n            \n        except Exception as e:\n            frappe.log_error(f\"Template rendering error: {str(e)}\")\n            return {\n                \"subject\": \"Job Order Notification\",\n                \"body\": f\"Job Order {doc.job_number} requires attention.\"\n            }\n    \n    def _send_email_notification(self, recipients: List[str], content: Dict[str, str], priority: str):\n        \"\"\"Send email notification.\"\"\"\n        try:\n            frappe.sendmail(\n                recipients=recipients,\n                subject=content[\"subject\"],\n                message=content[\"body\"],\n                now=priority == \"high\"\n            )\n        except Exception as e:\n            frappe.log_error(f\"Email notification error: {str(e)}\")\n    \n    def _send_in_app_notification(self, recipients: List[str], content: Dict[str, str], priority: str):\n        \"\"\"Send in-app notification.\"\"\"\n        try:\n            for recipient in recipients:\n                # Create notification document\n                notification = frappe.get_doc({\n                    \"doctype\": \"Notification Log\",\n                    \"subject\": content[\"subject\"],\n                    \"email_content\": content[\"body\"],\n                    \"for_user\": recipient,\n                    \"type\": \"Alert\",\n                    \"document_type\": \"Job Order\"\n                })\n                notification.insert(ignore_permissions=True)\n        except Exception as e:\n            frappe.log_error(f\"In-app notification error: {str(e)}\")\n    \n    def _send_sms_notification(self, recipients: List[str], content: Dict[str, str], priority: str):\n        \"\"\"Send SMS notification (placeholder for integration with SMS service).\"\"\"\n        # Placeholder for SMS integration\n        frappe.log_error(\"SMS notifications not yet implemented\")\n    \n    def _calculate_days_in_phase(self, doc) -> int:\n        \"\"\"Calculate number of days the job has been in current phase.\"\"\"\n        try:\n            if doc.phase_start_date:\n                from frappe.utils import date_diff\n                return date_diff(now_datetime(), doc.phase_start_date)\n            return 0\n        except:\n            return 0\n    \n    def _load_notification_templates(self) -> Dict[str, Dict[str, str]]:\n        \"\"\"Load notification templates.\"\"\"\n        return {\n            \"estimation_requested\": {\n                \"subject\": \"Estimation Required: Job {job_number}\",\n                \"body\": \"\"\"Dear Team,\n\nA new job order {job_number} for {customer_name} has been submitted and requires estimation.\n\nProject: {project_name}\nJob Type: {job_type}\nPriority: {priority}\n\nPlease review the job details and provide cost and time estimates.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"client_approval_needed\": {\n                \"subject\": \"Client Approval Required: Job {job_number}\",\n                \"body\": \"\"\"Dear {customer_name},\n\nYour job order {job_number} has been estimated and is ready for your approval.\n\nProject: {project_name}\nEstimated Cost: Please review in the system\n\nPlease log into the system to review and approve the estimates.\n\nThank you,\nAPI Industrial Services\"\"\"\n            },\n            \"planning_phase_started\": {\n                \"subject\": \"Planning Phase: Job {job_number}\",\n                \"body\": \"\"\"Dear Team,\n\nJob order {job_number} has been approved by the client and moved to the planning phase.\n\nProject: {project_name}\nCustomer: {customer_name}\nPriority: {priority}\n\nPlease begin resource allocation and scheduling.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"prework_phase_started\": {\n                \"subject\": \"Prework Phase: Job {job_number}\",\n                \"body\": \"\"\"Dear Team,\n\nJob order {job_number} has moved to the prework phase.\n\nProject: {project_name}\nScheduled Start: {start_date}\n\nPlease begin material ordering and equipment preparation.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"execution_phase_started\": {\n                \"subject\": \"URGENT: Execution Phase Started - Job {job_number}\",\n                \"body\": \"\"\"Dear Team,\n\nJob order {job_number} has started the execution phase.\n\nProject: {project_name}\nCustomer: {customer_name}\nStart Date: {start_date}\n\nAll team members should be on-site and ready to begin work.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"review_phase_started\": {\n                \"subject\": \"Review Required: Job {job_number}\",\n                \"body\": \"\"\"Dear Team,\n\nJob order {job_number} has completed execution and requires review.\n\nProject: {project_name}\nCustomer: {customer_name}\n\nPlease conduct quality checks and schedule client walkthrough.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"invoicing_phase_started\": {\n                \"subject\": \"Invoicing Required: Job {job_number}\",\n                \"body\": \"\"\"Dear Billing Team,\n\nJob order {job_number} has been completed and approved for invoicing.\n\nProject: {project_name}\nCustomer: {customer_name}\n\nPlease generate and send invoice to client.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"closeout_phase_started\": {\n                \"subject\": \"Closeout Required: Job {job_number}\",\n                \"body\": \"\"\"Dear Team,\n\nJob order {job_number} is ready for closeout.\n\nProject: {project_name}\nCustomer: {customer_name}\n\nPlease complete final documentation and archival.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"job_completed\": {\n                \"subject\": \"Job Completed: {job_number}\",\n                \"body\": \"\"\"Dear {customer_name},\n\nWe are pleased to inform you that job order {job_number} has been completed successfully.\n\nProject: {project_name}\nCompletion Date: {transition_date}\n\nThank you for choosing API Industrial Services.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"escalation_alert\": {\n                \"subject\": \"ESCALATION: Job {job_number} - Phase {current_phase}\",\n                \"body\": \"\"\"ATTENTION REQUIRED\n\nJob order {job_number} has been in {current_phase} phase for {days_in_phase} days without progression.\n\nProject: {project_name}\nCustomer: {customer_name}\nPriority: {priority}\n\nImmediate action required to move this job forward.\n\nAPI Industrial Services\"\"\"\n            },\n            \"approval_request\": {\n                \"subject\": \"Approval Required: Job {job_number}\",\n                \"body\": \"\"\"Dear Approver,\n\nJob order {job_number} requires your approval.\n\nReason: {reason}\nProject: {project_name}\nCustomer: {customer_name}\n\nPlease review and provide approval in the system.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            },\n            \"deadline_reminder\": {\n                \"subject\": \"Deadline Reminder: Job {job_number} - {days_until_deadline} days remaining\",\n                \"body\": \"\"\"Dear Team,\n\nThis is a reminder that job order {job_number} has {days_until_deadline} days until deadline.\n\nProject: {project_name}\nDeadline: {deadline_date}\nCurrent Phase: {current_phase}\n\nPlease ensure all activities are on track to meet the deadline.\n\nBest regards,\nAPI Industrial Services\"\"\"\n            }\n        }"